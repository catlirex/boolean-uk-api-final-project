// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "selectRelationCount"]
}

model User {
  id           Int    @id @default(autoincrement())
  name         String
  phone_number Int    @unique

  transactions Transaction[]
}

model Shop {
  id       Int    @id @default(autoincrement())
  name     String
  postcode String @unique
  image    String

  transactions Transaction[]
}

model Coffee {
  id          Int     @id @default(autoincrement())
  name        String
  size        String
  price       Float
  description String
  ice         Boolean
  image       String

  coffee_orders CoffeeOrder[]
}

model SpecialRequest {
  id      Int    @id @default(autoincrement())
  request String
  price   Float
  type    String

  coffeeOrders SpecialRequest_CoffeeOrder[]
}

model CoffeeOrder {
  id       Int @id @default(autoincrement())
  quantity Int

  transaction_id Int
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  coffee_id Int
  coffee    Coffee @relation(fields: [coffee_id], references: [id], onDelete: Cascade)

  specialRequests SpecialRequest_CoffeeOrder[]
}

model SpecialRequest_CoffeeOrder {
  id Int @id @default(autoincrement())

  specialRequestId Int
  specialRequest   SpecialRequest @relation(fields: [specialRequestId], references: [id], onDelete: Cascade)

  coffeeOrderId Int
  coffeeOrder   CoffeeOrder @relation(fields: [coffeeOrderId], references: [id], onDelete: Cascade)
}

enum Status {
  pending
  procressing
  ready
  collected
}

model Transaction {
  id                    Int      @id @default(autoincrement())
  status                Status   @default(pending)
  // Might give an error
  transaction_time      DateTime @default(now())
  estimated_pickup_time DateTime

  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  shop_id Int
  shop    Shop @relation(fields: [shop_id], references: [id], onDelete: Cascade)

  coffeeOrder CoffeeOrder[]
}
